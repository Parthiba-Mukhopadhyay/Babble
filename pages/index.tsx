import Head from "next/head";
import React, { useEffect, useRef, useState } from "react";
import styles from "../styles/Home.module.css";
import {RtmChannel, RtmClient} from "agora-rtm-sdk";

type Room={
  status: string;
  _id: string;
}

type TMessage={
  userId: string;
  message: string|undefined;
}

function createRoom(): Promise<Room>{
  return fetch('/api/rooms', {method:"POST",}).then(response=>response.json());
}

function getRandomRoom(): Promise<Room[]>{
  return fetch('/api/rooms').then(response=>response.json());
}

//connecting to agroa chat sdk
async function connectToAgora(roomId: string, userId: string, onMessage: (message:TMessage)=>void) {
  const {default: AgoraRTM} = await import("agora-rtm-sdk");
  const client=AgoraRTM.createInstance(process.env.NEXT_PUBLIC_AGORA_APP_ID!);
  await client.login({uid:userId,});
  //for each client we create a channel and connect it with another channel
  const channel=await client.createChannel(roomId);
  await channel.join();
  channel.on('ChannelMessage',(message, userId)=>{
    onMessage(
      {
        userId,
        message:message.text,
      }
    );
  });
  return{
    channel,
  };
}


export default function Home() {

  const [userId]=useState(parseInt(`${Math.random()*1e6}`)+"");//assigning a random user id to each person
  const [room,setRoom]=useState <Room| undefined>();
  const [messages,setMessages]=useState<TMessage[]>([]);
  const [input,setInput]=useState("");
  const channelRef=useRef<RtmChannel>();

  async function handleSubmitMessage(e:React.FormEvent){
    e.preventDefault();
    await channelRef.current?.sendMessage({
      text:input,
    });
    setMessages((cur)=>[...cur,{userId, message: input}]);//to check own message
    setInput("");
  }

  async function handleStartChattingClicked(){
    //check if room is available with status waiting from api call, if so modify state and connect to agora
    const rooms=await getRandomRoom()
      if(rooms.length>0){
        setRoom(rooms[0]);//assigning the first room from the array of rooms
        const {channel}=await connectToAgora(rooms[0]._id, userId,(message: TMessage)=>setMessages((cur)=>[...cur,message]));
        channelRef.current=channel
      }else{
        const room=await createRoom();
        setRoom(room);
        const {channel}=await connectToAgora(room._id, userId,(message: TMessage)=>setMessages((cur)=>[...cur,message]));
        channelRef.current=channel;
      }
  }

  function convertMessageYouThem(message: TMessage){
    return message.userId===userId?"You":"Stranger";
  }

  const isChatting=room!!;
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {isChatting? 
        <div className="chat-window">
          <div className="video-panel">
            <div className="video-stream"></div>
            <div className="video-stream"></div>
          </div>
          <div className="chat-panel">
            <ul>
              {messages.map((message,idx)=>(
                <li key={idx}>
                  {convertMessageYouThem(message)}-{message.message}
                </li>
              ))}
            </ul>
            <form onSubmit={handleSubmitMessage}>
              <input value={input} onChange={(e)=>setInput(e.target.value)}></input>
              <button>submit</button>
            </form>
          </div>
        </div>:<>
        <button onClick={handleStartChattingClicked}>Start chatting</button>
      </>}
        </main>
    </>
  );
}
